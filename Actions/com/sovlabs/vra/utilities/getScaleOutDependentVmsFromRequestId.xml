<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="getScaleOutDependentVmsFromRequestId" result-type="Any" api-version="6.0.0" id="5433c3cd-f79f-4d96-a9fd-f500f2e58949" version="0.0.4" allowed-operations="evf" category-name="com.sovlabs.vra.utilities">
  <param n="requestId" t="string"/>
  <param n="cafeHost" t="vCACCAFE:VCACHost"/>
  <param n="componentId" t="string"/>
  <param n="existingVmsJson" t="string"/>
  <script encoded="false"><![CDATA[if (cafeHost == null) { throw "cafeHost is null"; }
if (requestId == null) { throw "requestId is null"; }
if (componentId == null) { throw "componentId is null"; }
if (existingVmsJson == null) { throw "existingVmsJson is null"; }
try {
  JSON.parse(existingVmsJson);
} catch (e) {
  throw "existingVmsJson is not a valid JSON: " + existingVmsJson + " error: " + e;
}

var existingVmIds = new Array();
var existingVmsObj = JSON.parse(existingVmsJson);
for (var key in existingVmsObj) {
  existingVmIds.push(existingVmsObj[key]);
}
System.debug("Existing VM IDs: " + existingVmIds.join(", "));

var vmProps = new Array();
var version = System.getModule("com.sovlabs.vra.utilities").validateVraCafePluginVersion();
var catClient = cafeHost.createRestClient(vCACCAFEServicesEnum.CATALOG_SERVICE);
var compClient = cafeHost.createRestClient(vCACCAFEServicesEnum.COMPOSITION_SERVICE);

try {
    var componentRequestStatusStr = compClient.getWithVariables("requests/external/{requestId}/status", [requestId]).getBodyAsString();
    var componentRequestStatusObj = JSON.parse(componentRequestStatusStr.replace(/\\"/g, "").replace(/\\'/g, ""));
    //System.debug("componentRequestStatusObj: " + JSON.stringify(componentRequestStatusObj));
	var statusObjs = componentRequestStatusObj.componentRequestStatuses;
	if (version.match(/^7.3/)) {
		statusObjs = componentRequestStatusObj.componentRequestStatuses.content;
	}
    for each (var statusObj in statusObjs) {
      if (statusObj.componentId == componentId) {
        System.debug("Found component in request " + requestId + ": " + JSON.stringify(statusObj));
         for each (var vmProp in findDependentVms(cafeHost, requestId, statusObjs, statusObj.waitsFor)) {
          vmProps.push(vmProp); 
        }
      } 
    }
} catch (e) {
  throw "Unable to locate component ID " + componentId + " or request " + requestId + " - " + e;
}
if (vmProps == null || vmProps.length == 0) {
  System.warn("Unable find any dependent VMs for " + componentId + " in request " + requestId);
  return new Array();
}
System.debug("Found " + vmProps.length + " total dependent VMs");
var newVmProps = new Array();
for each (var vmPropObj in vmProps) {
  if (existingVmIds.indexOf(vmPropObj.machineId) == -1) {
    newVmProps.push(vmPropObj);
  }
}
System.debug("Found " + newVmProps.length + " new dependent VMs");
System.debug("newVmProps: " + JSON.stringify(newVmProps));
return newVmProps;


function findDependentVms(cafeHost, requestId, componentRequestStatuses, waitsForObj) {
  //System.debug("componentRequestStatuses: " + JSON.stringify(componentRequestStatuses));
  //System.debug("waitsForObj: " + JSON.stringify(waitsForObj));
  var vmProperties = new Array();
  if (waitsForObj == null) { return vmProperties; }
  var propEntitySet = "VirtualMachines";
  var queries = new Array();
  for each (var statusObj in componentRequestStatuses) {
    if (statusObj.componentTypeRef != null && statusObj.componentTypeRef.id != null && statusObj.requestType == "Provision" &&
      statusObj.componentTypeRef.id.match("^Infrastructure.CatalogItem.Machine") && waitsForObj[statusObj.id] != null) {
      queries.push("(p/PropertyName eq '__api.request.id' and p/PropertyValue eq '" + statusObj.requestBindingId + "')");
      continue;
    }     
  }
  //System.debug("queries: " + queries.length + ": " + queries.toSource());
  if (queries.length > 0) {
    var filter = "VirtualMachineProperties/any(p: " + queries.join(" or ") + " )";
    for each (var iaasHost in Server.findAllForType("vCAC:VCACHost")) {
      var vmEntities = vCACEntityManager.readModelEntitiesBySystemQuery(iaasHost.id, "ManagementModelEntities.svc", propEntitySet, filter);
      if (vmEntities != null && vmEntities.length > 0) {
        for each (var iaasVmEntity in vmEntities) {
          var iaasVm = iaasVmEntity.getInventoryObject();
          var vmProps = System.getModule("com.sovlabs.vra.utilities").initialize_vmProperties(iaasHost, iaasVm, iaasVmEntity, cafeHost.tenant, cafeHost);
          vmProperties.push(vmProps);
        }
        break;
      }
    }
  }
  return vmProperties;
}]]></script>
</dunes-script-module>