<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item4" object-name="workflow:name=generic" id="028e4b7f-e9f5-49e1-ab2c-00b5774c2c26" version="0.0.1" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Create vROPs Alert and Symptom Definitions (Livefire)]]></display-name>
  <description><![CDATA[Autogenerated workflow.]]></description>
  <position y="50.0" x="160.0"/>
  <input>
    <param name="Alert_Definition_Name" type="string"/>
    <param name="Alert_Definition_Description" type="string"/>
    <param name="Symptom_Definition_Name" type="string"/>
  </input>
  <output>
    <param name="contentLength" type="number">
      <description><![CDATA[Response content length]]></description>
    </param>
    <param name="headers" type="Properties">
      <description><![CDATA[Response headers]]></description>
    </param>
    <param name="contentAsString" type="string">
      <description><![CDATA[Response content as string]]></description>
    </param>
  </output>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="statusCodeAttribute" type="number" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="hostResource" type="ResourceElement" read-only="false" conf-id="0cc8560b-e5a4-40ae-b425-4e30348f4189" conf-key="vROPs"/>
  <attrib name="token" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="restOperation_SymptomDefAdd" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='vROPS:da3836ae-faed-4f4d-b8f8-e6f3f06fc38e'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="restOperation_AlertDefAdd" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='vROPS:0e5b2edb-2504-4da1-b85d-54bd91d88c92'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="statusCode" type="number" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Response status code]]></description>
  </attrib>
  <attrib name="SymptomDef_Id" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="AlertDef_Id" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="restOperation_PolicyAdd" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='vROPS:848307aa-e3e0-4894-9f53-0abbe232e792'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="SleepTime" type="number" read-only="false">
    <value encoded="n"><![CDATA[30.0]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <in-binding/>
    <position y="230.0" x="1320.0"/>
  </workflow-item>
  <workflow-item name="item1" throw-bind-name="errorCode" type="end" end-mode="1">
    <in-binding/>
    <position y="50.0" x="840.0"/>
  </workflow-item>
  <workflow-item name="item4" out-name="item13" type="link" linked-workflow-id="a29dff9a-a12d-4625-9a3a-296630b0c5ce">
    <display-name><![CDATA[get vROPs token]]></display-name>
    <in-binding/>
    <out-binding>
      <bind name="contentLength" type="number" export-name="contentLength">
        <description><![CDATA[Response content length]]></description>
      </bind>
      <bind name="headers" type="Properties" export-name="headers">
        <description><![CDATA[Response headers]]></description>
      </bind>
      <bind name="contentAsString" type="string" export-name="contentAsString">
        <description><![CDATA[Response content as string]]></description>
      </bind>
      <bind name="token" type="string" export-name="token"/>
      <bind name="statusCode" type="number" export-name="statusCode">
        <description><![CDATA[Response status code]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[ ]]></description>
    <position y="60.0" x="260.0"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item8" type="task">
    <display-name><![CDATA[Create vROPs Symptom Definition ]]></display-name>
    <script encoded="false"><![CDATA[//prepare request
var restOperation = restOperation_SymptomDefAdd
var content = JSON.stringify({
  "name" : Symptom_Definition_Name ,
  "adapterKindKey" : "VMWARE",
  "resourceKindKey" : "VirtualMachine",
  "waitCycles" : 1,
  "cancelCycles" : 1,
  "state" : {
    "severity" : "CRITICAL",
    "condition" : {
      "type" : "CONDITION_HT",
      "key" : "sys|poweredOn",
      "operator" : "EQ",
      "value" : "0.0",
      "valueType" : "NUMERIC",
      "instanced" : false,
      "thresholdType" : "STATIC"
    }
  }
})
//Do not edit 
var inParamtersValues = [];
var request = restOperation.createRequest(inParamtersValues, content);
//set the request content type
request.contentType = "application/json";
System.log("Request: " + request);
System.log("Request URL: " + request.fullUrl);

//Customize the request here
System.log("token: " + token);
request.setHeader("Authorization", "vRealizeOpsToken " + token);
request.setHeader("Accept", "application/json");

//execute request
//Do not edit 
var response = request.execute();
System.debug(response.contentAsString);
//prepare output parameters
//System.log("Response: " + response.contentAsString);
System.log("Response: " + response);
contentLength = response.contentLength;
headers = response.getAllHeaders();
statusCode = response.statusCode;
statusCodeAttribute = statusCode;
System.log("Status code: " + statusCode);

//grab symptom definition id
var res = JSON.parse(response.contentAsString);
var SymptomDef_Id = res.id;
System.log("Symptom_Definition Id is " + SymptomDef_Id)

]]></script>
    <in-binding>
      <bind name="token" type="string" export-name="token"/>
      <bind name="hostResource" type="ResourceElement" export-name="hostResource"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="restOperation_SymptomDefAdd" type="REST:RESTOperation" export-name="restOperation_SymptomDefAdd"/>
      <bind name="Symptom_Definition_Name" type="string" export-name="Symptom_Definition_Name"/>
    </in-binding>
    <out-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
      <bind name="contentLength" type="number" export-name="contentLength"/>
      <bind name="headers" type="Properties" export-name="headers"/>
      <bind name="contentAsString" type="string" export-name="contentAsString"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="SymptomDef_Id" type="string" export-name="SymptomDef_Id"/>
    </out-binding>
    <description><![CDATA[Create vROPs Symptom Definition ]]></description>
    <position y="103.63636363636364" x="576.3636363636364"/>
  </workflow-item>
  <workflow-item name="item8" out-name="item9" type="custom-condition" alt-out-name="item1">
    <display-name><![CDATA[Check vROPs Symptom Definition Creation Status]]></display-name>
    <script encoded="false"><![CDATA[if ( statusCode !== 201 ) {
    throw "HTTPError: status code: " + statusCode;
} else {
    return true;
}]]></script>
    <in-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Status of Create vROPS Symptom Definition Request]]></description>
    <position y="150.0" x="800.0"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item11" type="task">
    <display-name><![CDATA[Create vROPS Alert Definition]]></display-name>
    <script encoded="false"><![CDATA[//prepare request
var restOperation = restOperation_AlertDefAdd
var content = JSON.stringify({
  "name" : Alert_Definition_Name,
  "description" : Alert_Definition_Description,
  "adapterKindKey" : "VMWARE",
  "resourceKindKey" : "VirtualMachine",
  "waitCycles" : 1,
  "cancelCycles" : 1,
  "type" : 15,
  "subType" : 19,
  "states" : [ {
    "severity" : "WARNING",
    "base-symptom-set" : {
      "type" : "SYMPTOM_SET",
      "operator" : "AND",
      "relation" : "SELF",
      "aggregation" : "ANY",
      "symptomSetOperator" : "OR",
      "symptomDefinitionIds" : [SymptomDef_Id],
      "alertConditions" : []
        },    
    "impact" : {
      "impactType" : "BADGE",
      "detail" : "health"
    }
  } ]
})

System.log("Alert_definitionName is " + Alert_Definition_Name);
System.log("Syptom_definition ID is " + SymptomDef_Id);
//Do not edit 
var inParamtersValues = [];
var request = restOperation.createRequest(inParamtersValues, content);
//set the request content type
request.contentType = "application\/json";
System.log("Request: " + request);
System.log("Request URL: " + request.fullUrl);

//Customize the request here
System.log("token: " + token);
request.setHeader("Authorization", "vRealizeOpsToken " + token);
request.setHeader("Accept", "application/json");

//execute request
//Do not edit 
var response = request.execute();
//prepare output parameters
System.log("Response: " + response);
statusCode = response.statusCode;
statusCodeAttribute = statusCode;
System.log("Status code: " + statusCode);
contentLength = response.contentLength;
headers = response.getAllHeaders();
contentAsString = response.contentAsString;
System.log("Content as string: " + contentAsString);

//grab alert definition id
var res = JSON.parse(response.contentAsString);
var AlertDef_Id = res.id;
System.log("Alert_Definition Id is " + AlertDef_Id)]]></script>
    <in-binding>
      <bind name="restOperation_AlertDefAdd" type="REST:RESTOperation" export-name="restOperation_AlertDefAdd"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="hostResource" type="ResourceElement" export-name="hostResource"/>
      <bind name="token" type="string" export-name="token"/>
      <bind name="Alert_Definition_Name" type="string" export-name="Alert_Definition_Name"/>
      <bind name="Alert_Definition_Description" type="string" export-name="Alert_Definition_Description"/>
      <bind name="SymptomDef_Id" type="string" export-name="SymptomDef_Id"/>
    </in-binding>
    <out-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
      <bind name="contentLength" type="number" export-name="contentLength"/>
      <bind name="headers" type="Properties" export-name="headers"/>
      <bind name="contentAsString" type="string" export-name="contentAsString"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="AlertDef_Id" type="string" export-name="AlertDef_Id"/>
    </out-binding>
    <description><![CDATA[Status of Create vROPS Alert Definition Request]]></description>
    <position y="240.0" x="800.0"/>
  </workflow-item>
  <workflow-item name="item11" out-name="item15" type="custom-condition" alt-out-name="item1">
    <display-name><![CDATA[Check vROPs Alert Definition Creation Status]]></display-name>
    <script encoded="false"><![CDATA[if ( statusCode !== 201 ) {
    throw "HTTPError: status code: " + statusCode;
} else {
    return true;
}]]></script>
    <in-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Custom decision based on a custom script.]]></description>
    <position y="230.0" x="960.0"/>
  </workflow-item>
  <workflow-item name="item13" out-name="item5" type="custom-condition" alt-out-name="item1">
    <display-name><![CDATA[Decision]]></display-name>
    <script encoded="false"><![CDATA[if ( statusCode == "" ) {
    throw "HTTPError: status code: " + statusCode;
} else {
    return true;
}]]></script>
    <in-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Custom decision based on a custom script.]]></description>
    <position y="50.0" x="380.0"/>
  </workflow-item>
  <workflow-item name="item14" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[//prepare request
var restOperation = restOperation_PolicyAdd;
var AlertDefinitionId = AlertDef_Id;
System.log(restOperation);
//urlTemplate = ("/suite-api/api/alertdefinitions/"+AlertDef_Id+"/?policyId=0084e278-83af-4cbf-8e57-151ea5106751&_no_links=true");
var content = []


//Do not edit 
var inParamtersValues = [AlertDefinitionId];
var request = restOperation.createRequest(inParamtersValues, content);
//set the request content type
//request.contentType = "application\/json";
System.log("Request: " + request);
System.log("Request URL: " + request.fullUrl);

//Customize the request here
System.log("token: " + token);
request.setHeader("Authorization", "vRealizeOpsToken " + token);
request.setHeader("Accept", "application/json");

//execute request
//Do not edit 
var response = request.execute();
//prepare output parameters
System.log("Response: " + response);
statusCode = response.statusCode;
statusCodeAttribute = statusCode;
System.log("Status code: " + statusCode);
contentLength = response.contentLength;
headers = response.getAllHeaders();
contentAsString = response.contentAsString;
System.log("Content as string: " + contentAsString);
]]></script>
    <in-binding>
      <bind name="token" type="string" export-name="token"/>
      <bind name="hostResource" type="ResourceElement" export-name="hostResource"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="restOperation_PolicyAdd" type="REST:RESTOperation" export-name="restOperation_PolicyAdd"/>
      <bind name="AlertDef_Id" type="string" export-name="AlertDef_Id"/>
    </in-binding>
    <out-binding>
      <bind name="contentLength" type="number" export-name="contentLength"/>
      <bind name="statusCode" type="number" export-name="statusCode"/>
      <bind name="headers" type="Properties" export-name="headers"/>
      <bind name="contentAsString" type="string" export-name="contentAsString"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="240.0" x="1160.0"/>
  </workflow-item>
  <workflow-item name="item15" prototype-id="sleep" out-name="item14" content-mode="x" type="task">
    <display-name><![CDATA[Sleep]]></display-name>
    <script encoded="false"><![CDATA[//Auto-generated script
if ( sleepTime !== null )  {
	System.sleep(sleepTime * 1000);
}else  {
	throw "'sleepTime' is NULL"; 
}]]></script>
    <in-binding>
      <bind name="sleepTime" type="number" export-name="SleepTime">
        <description><![CDATA[Time to sleep in seconds]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Sleep a given number of seconds.]]></description>
    <position y="160.45454545454547" x="1053.6363636363637"/>
  </workflow-item>
  <presentation/>
</workflow>