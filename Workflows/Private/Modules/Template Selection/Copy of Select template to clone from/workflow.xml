<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="02d9d1f5-e6c5-4d7f-96d4-aaa1a089b5b4" version="0.0.2" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Copy of Select template to clone from]]></display-name>
  <description><![CDATA[Selects a template to clone based on the template name in the blueprint. It searches for the template which starts with the same name as the BP template and add "-<clustername>". 
This enables template deployments per cluster so VAAI can do it's job.]]></description>
  <position y="109.04545454545453" x="245.0"/>
  <input>
    <param name="virtualMachineEntity" type="vCAC:Entity"/>
    <param name="vCACHost" type="vCAC:VCACHost"/>
    <param name="vCACVmProperties" type="Properties"/>
  </input>
  <attrib name="templateName" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="cluster" type="VC:ClusterComputeResource" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="templateVm" type="VC:VirtualMachine" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="clonefromPropName" type="string" read-only="false">
    <value encoded="n"><![CDATA[__clonefrom]]></value>
    <description><![CDATA[Blueprint update property name]]></description>
  </attrib>
  <attrib name="__FALSE" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[Blueprint property 'isHidden' flag]]></description>
  </attrib>
  <attrib name="bpTemplateName" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="rootTemplateVm" type="VC:VirtualMachine" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="vmFolder" type="VC:VmFolder" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='vcvrapf01.nm.nmfco.com%2Cid:group-v438'&dunesName='VC:VmFolder']]></value>
    <description><![CDATA[Virtual machine folder]]></description>
  </attrib>
  <attrib name="__TRUE" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[true]]></value>
    <description><![CDATA[Specifies whether or not to mark the new virtual machine as a template]]></description>
  </attrib>
  <attrib name="targetDatastore" type="VC:Datastore" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="targetHost" type="VC:HostSystem" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="targetResourcePool" type="VC:ResourcePool" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="newTemplate" type="VC:VirtualMachine" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[Newly created virtual machine]]></description>
  </attrib>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="109.04545454545453" x="1604.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item4" type="task">
    <display-name><![CDATA[get template names]]></display-name>
    <script encoded="false"><![CDATA[var bpTemplateName = vCACVmProperties.get("__clonefrom");

System.log("Template used by blueprint: " + bpTemplateName);

var hostEntity = virtualMachineEntity.getLink(vCACHost, "HostReservation")[0].getLink(vCACHost, "Host")[0];
var clusterName = hostEntity.getProperty("HostName");

var cluster = Server.findAllForType("VC:ClusterComputeResource")
	.filter(function(cls) {
		return cls.name == clusterName;
	})[0];
	
var templateName = bpTemplateName + "-" + clusterName;
System.log("Template used for deployment: " + templateName);

]]></script>
    <in-binding>
      <bind name="virtualMachineEntity" type="vCAC:Entity" export-name="virtualMachineEntity"/>
      <bind name="vCACHost" type="vCAC:VCACHost" export-name="vCACHost"/>
      <bind name="vCACVmProperties" type="Properties" export-name="vCACVmProperties"/>
    </in-binding>
    <out-binding>
      <bind name="templateName" type="string" export-name="templateName"/>
      <bind name="cluster" type="VC:ClusterComputeResource" export-name="cluster"/>
      <bind name="bpTemplateName" type="string" export-name="bpTemplateName"/>
    </out-binding>
    <position y="119.04545454545453" x="344.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item3" type="task">
    <display-name><![CDATA[Get template object]]></display-name>
    <script encoded="false"><![CDATA[var vmList = cluster.vimHost.getAllVirtualMachines()
	.filter(function(vm) {
		return vm.name == templateName;
	});
	
templateVm = null;

if (vmList && vmList.length == 1) {
	System.log("Template found for cluster");
	templateVm = vmList[0];
} else {
	System.log("Template not found for cluster.");
}]]></script>
    <in-binding>
      <bind name="templateName" type="string" export-name="templateName"/>
      <bind name="cluster" type="VC:ClusterComputeResource" export-name="cluster"/>
    </in-binding>
    <out-binding>
      <bind name="templateVm" type="VC:VirtualMachine" export-name="templateVm"/>
    </out-binding>
    <position y="119.04545454545453" x="624.5"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item10" type="custom-condition" alt-out-name="item11">
    <display-name><![CDATA[Template exists for cluster?]]></display-name>
    <script encoded="false"><![CDATA[return templateVm != null;]]></script>
    <in-binding>
      <bind name="templateVm" type="VC:VirtualMachine" export-name="templateVm"/>
    </in-binding>
    <position y="109.04545454545453" x="764.5"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item0" type="task" script-module="com.vmware.library.vcac/addUpdatePropertyFromVirtualMachineEntity">
    <display-name><![CDATA[addUpdatePropertyFromVirtualMachineEntity]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.vmware.library.vcac").addUpdatePropertyFromVirtualMachineEntity(host,virtualMachineEntity,propertyName,propertyValue,propertyIsHidden,propertyIsRuntime,propertyIsEncrypted,doNotUpdate) ;]]></script>
    <in-binding>
      <bind name="host" type="vCAC:VCACHost" export-name="vCACHost">
        <description><![CDATA[vCloud Automation Center host]]></description>
      </bind>
      <bind name="virtualMachineEntity" type="vCAC:Entity" export-name="virtualMachineEntity">
        <description><![CDATA[vCloud Automation Center virtual machine instance]]></description>
      </bind>
      <bind name="propertyName" type="string" export-name="clonefromPropName">
        <description><![CDATA[Blueprint update property name]]></description>
      </bind>
      <bind name="propertyValue" type="string" export-name="templateName">
        <description><![CDATA[Blueprint update property value]]></description>
      </bind>
      <bind name="propertyIsHidden" type="boolean" export-name="__FALSE">
        <description><![CDATA[Blueprint property 'isHidden' flag]]></description>
      </bind>
      <bind name="propertyIsRuntime" type="boolean" export-name="__FALSE">
        <description><![CDATA[Blueprint property 'isRuntime' flag]]></description>
      </bind>
      <bind name="propertyIsEncrypted" type="boolean" export-name="__FALSE">
        <description><![CDATA[Blueprint property 'isHidden' flag]]></description>
      </bind>
      <bind name="doNotUpdate" type="boolean" export-name="__FALSE">
        <description><![CDATA[Update flag]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="vCAC:Entity" explicitly-not-bound="true" export-name="NULL"/>
    </out-binding>
    <position y="119.04545454545453" x="1464.5"/>
  </workflow-item>
  <workflow-item name="item6" out-name="item8" catch-name="item12" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[get template VM]]></display-name>
    <script encoded="false"><![CDATA[var vmList = cluster.vimHost.getAllVirtualMachines()
	.filter(function(vm) {
		return vm.name == bpTemplateName;
	});
	
if (! vmList || vmList.length != 1) {
	throw new Error("template specified in blueprint not found on vCenter server");
}

rootTemplateVm = vmList[0];]]></script>
    <in-binding>
      <bind name="cluster" type="VC:ClusterComputeResource" export-name="cluster"/>
      <bind name="bpTemplateName" type="string" export-name="bpTemplateName"/>
    </in-binding>
    <out-binding>
      <bind name="rootTemplateVm" type="VC:VirtualMachine" export-name="rootTemplateVm"/>
    </out-binding>
    <position y="182.68181818181816" x="864.5"/>
  </workflow-item>
  <workflow-item name="item7" out-name="item14" catch-name="item12" throw-bind-name="errorCode" type="link" linked-workflow-id="BD808080808080808080808080808080FBC280800122528313869552e41805bb1">
    <display-name><![CDATA[Clone virtual machine, no customization]]></display-name>
    <in-binding>
      <bind name="vm" type="VC:VirtualMachine" export-name="rootTemplateVm">
        <description><![CDATA[Virtual machine or template to clone]]></description>
      </bind>
      <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder">
        <description><![CDATA[Virtual machine folder]]></description>
      </bind>
      <bind name="name" type="string" export-name="templateName">
        <description><![CDATA[Name of the new virtual machine]]></description>
      </bind>
      <bind name="powerOn" type="boolean" export-name="__FALSE">
        <description><![CDATA[Specifies whether or not to power on the new virtual machine]]></description>
      </bind>
      <bind name="template" type="boolean" export-name="__TRUE">
        <description><![CDATA[Specifies whether or not to mark the new virtual machine as a template]]></description>
      </bind>
      <bind name="datastore" type="VC:Datastore" export-name="targetDatastore">
        <description><![CDATA[Datastore in which to put the virtual machine. If not specified, the current datastore is used]]></description>
      </bind>
      <bind name="host" type="VC:HostSystem" export-name="targetHost">
        <description><![CDATA[Destination host for the virtual machine. If not specified, the current host is used]]></description>
      </bind>
      <bind name="pool" type="VC:ResourcePool" export-name="targetResourcePool">
        <description><![CDATA[Resource pool to which to attach this virtual machine]]></description>
      </bind>
      <bind name="thinProvision" type="boolean" export-name="__FALSE">
        <description><![CDATA[If TRUE, empty virtual disk space is not reserved]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="newVM" type="VC:VirtualMachine" export-name="newTemplate">
        <description><![CDATA[Newly created virtual machine]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[Clones a virtual machine without changing anything except the virtual machine UUID.]]></description>
    <position y="182.68181818181816" x="1244.5"/>
  </workflow-item>
  <workflow-item name="item8" out-name="item9" catch-name="item12" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Get datastore]]></display-name>
    <script encoded="false"><![CDATA[
//Get storage that is going to be used for deployment from VM
var storagePath = virtualMachineEntity.getProperty("StoragePath");
System.log("Storage Path: " + storagePath);

//Find the vRO object for this datastore cluster
var storageClusters = Server.findAllForType("VC:StoragePod").filter(function(storageCluster) {
	return storageCluster.name == storagePath;
});

if (! storageClusters || storageClusters.length != 1) {
	throw new Error ("No storage cluster found for template");
}

//Get the datastores inside the cluster and sort on freespace
var datastores = storageClusters[0].childEntity.sort(function(a,b) {
	return b.info.freeSpace - a.info.freeSpace;
});

//take datastore with most available space as target
targetDatastore = datastores[0];
]]></script>
    <in-binding>
      <bind name="cluster" type="VC:ClusterComputeResource" export-name="cluster"/>
      <bind name="virtualMachineEntity" type="vCAC:Entity" export-name="virtualMachineEntity"/>
    </in-binding>
    <out-binding>
      <bind name="targetDatastore" type="VC:Datastore" export-name="targetDatastore"/>
    </out-binding>
    <position y="182.68181818181816" x="984.5"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item7" catch-name="item12" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Get host and RP]]></display-name>
    <script encoded="false"><![CDATA[//Get all hosts from cluster and filter out those in maintenance mode
var availableHosts = cluster.host.filter(function(host) { 
	return (! host.runtime.inMaintenanceMode);
});

//use the first available host as target host
var targetHost = availableHosts[0];

targetResourcePool = targetHost.resourcePool;
]]></script>
    <in-binding>
      <bind name="cluster" type="VC:ClusterComputeResource" export-name="cluster"/>
    </in-binding>
    <out-binding>
      <bind name="targetHost" type="VC:HostSystem" export-name="targetHost"/>
      <bind name="targetResourcePool" type="VC:ResourcePool" export-name="targetResourcePool"/>
    </out-binding>
    <position y="182.68181818181816" x="1104.5"/>
  </workflow-item>
  <workflow-item name="item4" out-name="item1" type="task">
    <display-name><![CDATA[Get lock]]></display-name>
    <script encoded="false"><![CDATA[System.log("Getting lock on: " + templateName);
LockingSystem.lockAndWait(templateName, workflow.id);
]]></script>
    <in-binding>
      <bind name="templateName" type="string" export-name="templateName"/>
    </in-binding>
    <out-binding/>
    <position y="119.04545454545453" x="484.5"/>
  </workflow-item>
  <workflow-item name="item10" out-name="item5" type="task">
    <display-name><![CDATA[Unlock template]]></display-name>
    <script encoded="false"><![CDATA[System.log("Unlocking: "+ templateName);
LockingSystem.unlock(templateName, workflow.id);
]]></script>
    <in-binding>
      <bind name="templateName" type="string" export-name="templateName"/>
    </in-binding>
    <out-binding/>
    <position y="119.04545454545453" x="1344.5"/>
  </workflow-item>
  <workflow-item name="item11" out-name="item6" catch-name="item12" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[lock distribution]]></display-name>
    <script encoded="false"><![CDATA[System.log("Template not found. I'll clone the template to this cluster now");
System.log("Waiting for lock on 'templatedistribution'");

LockingSystem.lockAndWait("templatedistribution", workflow.id);
]]></script>
    <in-binding/>
    <out-binding/>
    <position y="182.68181818181816" x="764.5"/>
  </workflow-item>
  <workflow-item name="item12" out-name="item13" type="task">
    <display-name><![CDATA[unlock on error]]></display-name>
    <script encoded="false"><![CDATA[System.error("Error thrown: "+ errorCode);
System.log("Unlocking now");

LockingSystem.unlock(templateName, workflow.id);
LockingSystem.unlock("templatedistribution", workflow.id);]]></script>
    <in-binding>
      <bind name="errorCode" type="string" export-name="errorCode"/>
      <bind name="templateName" type="string" export-name="templateName"/>
    </in-binding>
    <out-binding/>
    <position y="282.68181818181813" x="984.5"/>
  </workflow-item>
  <workflow-item name="item13" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="327.2272727272727" x="1024.5"/>
  </workflow-item>
  <workflow-item name="item14" out-name="item10" type="task">
    <display-name><![CDATA[unlock distribution]]></display-name>
    <script encoded="false"><![CDATA[System.log("Unlocking 'templatedistribution'");
LockingSystem.unlock("templatedistribution", workflow.id);]]></script>
    <in-binding>
      <bind name="templateName" type="string" export-name="templateName"/>
    </in-binding>
    <out-binding/>
    <position y="182.68181818181816" x="1344.5"/>
  </workflow-item>
  <presentation>
    <p-param name="virtualMachineEntity">
      <desc><![CDATA[virtualMachineEntity]]></desc>
    </p-param>
    <p-param name="vCACHost">
      <desc><![CDATA[vCACHost]]></desc>
    </p-param>
    <p-param name="vCACVmProperties">
      <desc><![CDATA[vCACVmProperties]]></desc>
    </p-param>
  </presentation>
</workflow>