<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item6" object-name="workflow:name=generic" id="b2aa65bf-dd04-4991-b822-44412053ef7a" version="0.1.5" api-version="6.0.0" allowed-operations="evf" restartMode="0" resumeFromFailedMode="2">
  <display-name><![CDATA[Advanced force data collection]]></display-name>
  <description><![CDATA[Advanced version of the "force data collection" workflow. Will start data collection and 
wait till the data collection finished. If selected, will also check the update status and fail
if the data collection fails.


Copyright (C) 2015  Robert Szymczak	(robert.szymczak@outlook.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.]]></description>
  <error-handler name="item13" throw-bind-name="errorCode">
    <position y="181.77272727272725" x="625.0"/>
  </error-handler>
  <position y="63.59090909090908" x="45.0"/>
  <input>
    <param name="host" type="vCAC:VCACHost">
      <description><![CDATA[IaaS host to force a data-collection on]]></description>
    </param>
    <param name="dataCollectionSelection" type="Array/string">
      <description><![CDATA[Selection of data collection sets to update. Will update all if null or empty.]]></description>
    </param>
    <param name="clustersToUpdate" type="Array/vCAC:HostMachine">
      <description><![CDATA[Selection of clusters / hosts to update. Will update all if null or empty.]]></description>
    </param>
    <param name="failOnError" type="boolean">
      <description><![CDATA[Should the WF fail if a data collection fails?]]></description>
    </param>
  </input>
  <attrib name="timeout" type="number" read-only="true">
    <value encoded="n"><![CDATA[5.0]]></value>
    <description><![CDATA[Timeout for checking in minutes. Will end the workflow after the specified time, even if not all entities have been updated yet.]]></description>
  </attrib>
  <attrib name="workflowStartDate" type="Date" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[Start date when the workflow was started.]]></description>
  </attrib>
  <attrib name="pollInterval" type="number" read-only="false">
    <value encoded="n"><![CDATA[30.0]]></value>
    <description><![CDATA[Polling interval in seconds]]></description>
  </attrib>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Latest error code]]></description>
  </attrib>
  <attrib name="dataCollectionStatusIds" type="Array/string" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[IDs for the data collection entities that have to be updated.]]></description>
  </attrib>
  <attrib name="dataCollectionStatusId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[ID for the data collection entity that is currently beeing updated.]]></description>
  </attrib>
  <attrib name="dataCollectionSelector" type="string" read-only="false">
    <value encoded="n"><![CDATA[inventory]]></value>
    <description><![CDATA[Selector with pre-defined FilterSpecGroupNames that can be updated.]]></description>
  </attrib>
  <attrib name="updated" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[Indicates that the last update was sucessfull.]]></description>
  </attrib>
  <attrib name="dataCollectionStartDate" type="Date" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[Stat date when the current data collection was started.]]></description>
  </attrib>
  <attrib name="entityKey" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Current entityKey]]></description>
  </attrib>
  <attrib name="datacollectionFailed" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[Indicates that one or more data collection jobs failed.]]></description>
  </attrib>
  <attrib name="collectionWasRunning" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[Indicates that a data collection was already running when we requested to run a data collection.]]></description>
  </attrib>
  <attrib name="debugMode" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[Enables more detailed logging output.]]></description>
  </attrib>
  <workflow-note x="880.0" y="36.36363636363636" w="520.0" h="190.9090909090909" color="a1bcd7ff">
    <description><![CDATA[Data Collection]]></description>
  </workflow-note>
  <workflow-note x="40.0" y="181.04545454545453" w="660.0" h="47.0" color="ffbfbfff">
    <description><![CDATA[Global Error Handling]]></description>
  </workflow-note>
  <workflow-item name="item3" out-name="item17" type="custom-condition" alt-out-name="item1">
    <display-name><![CDATA[timeout?]]></display-name>
    <script encoded="false"><![CDATA[// safety check in order to make sure that we don't end up in an endless loop while checking the update process.
var checkDate = new Date(dataCollectionStartDate);
checkDate.setMinutes(checkDate.getMinutes() + timeout);
var nowDate = new Date();

if(nowDate.getTime() > checkDate.getTime())
{
	System.log("StartDate + " + timeout + " minutes is: " + checkDate + ".");
	System.log("Now is: " + nowDate + ".");
	System.log("Maximum wait time reached. Exiting workflow...");
	return true;
}
else
{
	return false;
}]]></script>
    <in-binding>
      <bind name="dataCollectionStartDate" type="Date" export-name="dataCollectionStartDate"/>
      <bind name="timeout" type="number" export-name="timeout"/>
    </in-binding>
    <position y="63.59090909090908" x="1144.5"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item14" type="custom-condition" alt-out-name="item8">
    <display-name><![CDATA[was updated?]]></display-name>
    <script encoded="false"><![CDATA[if(updated)
{
	return true;
}
return false;
]]></script>
    <in-binding>
      <bind name="updated" type="boolean" export-name="updated"/>
    </in-binding>
    <position y="136.3181818181818" x="1284.5"/>
  </workflow-item>
  <workflow-item name="item8" prototype-id="sleep" out-name="item3" content-mode="x" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Sleep]]></display-name>
    <script encoded="false"><![CDATA[//Auto-generated script
if ( sleepTime != null )  {
	System.sleep(sleepTime*1000);
}
else  {
	throw "'sleepTime' is NULL";
}
]]></script>
    <in-binding>
      <bind name="sleepTime" type="number" export-name="pollInterval">
        <description><![CDATA[Time to sleep in seconds]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Sleep a given number of seconds]]></description>
    <position y="119.04545454545453" x="1144.5"/>
  </workflow-item>
  <workflow-item name="item6" out-name="item7" catch-name="item4" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[get sources]]></display-name>
    <script encoded="false"><![CDATA[// remember start time 
workflowStartDate = new Date();

//Read all data-collection sources
var modelName = 'ManagementModelEntities.svc';
var entitySetName = 'DataCollectionStatuses';
var datacollections = vCACEntityManager.readModelEntitiesByCustomFilter(host.id, modelName, entitySetName, null, null);

if(datacollections != null)
{
	dataCollectionStatusIds = [];
	System.log("Searching data collection entities...");
	
	for each (dc in datacollections)
	{
		//var lastCollectedStatus = dc.getProperty("LastCollectedStatus");			// true or false, depending on last success
		var isDisabled = dc.getProperty("IsDisabled");								// indicates if collection is disabled
		var dataCollectionStatusID = dc.getProperty("DataCollectionStatusID");		// unique id for this datacollection
		//var frequency = dc.getProperty("Frequency");								// freq. the collection is configured or default
		//var lastCollectedTime = dc.getProperty("LastCollectedTime");				// last time the collection successed
		var entityID = dc.getProperty("EntityID"); 									// reference to the ClusterHostId
		//var collectionStartTime = dc.getProperty("CollectionStartTime");			// the time when the current dc was started. Reset to null after every run.
		
		var filterSpec = dc.getLink(host, "FilterSpec")[0];								// link to FilterSpec
		var filterSpecGroup = filterSpec.getLink(host, "FilterSpecGroup")[0];			// link to FilterSpecGroup
		var filterSpecGroupName = filterSpecGroup.getProperty("FilterSpecGroupName");	// FilterSpecGroupName, identifies the colelction type
		
		if(debugMode)
		{
			System.log("Found filter specification '" + filterSpecGroupName + "' on cluster '" + entityID + "'." );
		}

		// proceed if the collection is not disabled and the filterSpecGroupName has some value
		if(!isDisabled && filterSpecGroupName)
		{
			// add all data collections
			if(dataCollectionSelection == null || dataCollectionSelection.lenght < 1)
			{
				//add all clusters
				if(clustersToUpdate == null || clustersToUpdate.length <1)
				{
					System.log("Will execute data collection for '" + filterSpecGroupName + "' on cluster '" + entityID + "'.");
					
					// add the data collection to the list of data collections to be updated
					dataCollectionStatusIds.push(dataCollectionStatusID);
				}
				// add only selected clusters
				else
				{
					for each(cluster in clustersToUpdate)
					{
						if(entityID === cluster.hostId)
						{
							System.log("Will execute data collection for '" + filterSpecGroupName + "' on cluster '" + entityID + "'.");
							
							// add the data collection to the list of data collections to be updated
							dataCollectionStatusIds.push(dataCollectionStatusID);
						}
					}
				}
			}
			// add only selected data collections
			else
			{
				for each (selection in dataCollectionSelection)
				{
					if(selection === filterSpecGroupName)
					{
						//add all clusters
						if(clustersToUpdate == null || clustersToUpdate.length <1)
						{
							System.log("Will execute data collection for '" + filterSpecGroupName + "' on cluster '" + entityID + "'.");
							
							// add the data collection to the list of data collections to be updated
							dataCollectionStatusIds.push(dataCollectionStatusID);
						}
						// add only selected clusters
						else
						{
							for each(cluster in clustersToUpdate)
							{
								if(entityID === cluster.hostId)
								{
									System.log("Will execute data collection for '" + filterSpecGroupName + "' on cluster '" + entityID + "'.");
									
									// add the data collection to the list of data collections to be updated
									dataCollectionStatusIds.push(dataCollectionStatusID);
								}
							}
						}
					}
				}
			}

		}
		else
		{
			// notify admin
			if(isDisabled)
			{
				System.warn("Warning: data collection '" + dataCollectionStatusID + "' is disabled!");
			}
		}
	}
}
else
{
	throw("Error: unable to read 'DataCollectionStatuses' entities. RUN!");
}]]></script>
    <in-binding>
      <bind name="host" type="vCAC:VCACHost" export-name="host"/>
      <bind name="dataCollectionSelection" type="Array/string" export-name="dataCollectionSelection"/>
      <bind name="debugMode" type="boolean" export-name="debugMode"/>
      <bind name="clustersToUpdate" type="Array/vCAC:HostMachine" export-name="clustersToUpdate"/>
    </in-binding>
    <out-binding>
      <bind name="dataCollectionStatusIds" type="Array/string" export-name="dataCollectionStatusIds"/>
      <bind name="workflowStartDate" type="Date" export-name="workflowStartDate"/>
    </out-binding>
    <position y="73.59090909090908" x="144.5"/>
  </workflow-item>
  <workflow-item name="item7" out-name="item0" type="custom-condition" alt-out-name="item9">
    <display-name><![CDATA[collect data?]]></display-name>
    <script encoded="false"><![CDATA[//Return true if there are any sources left to be data-collected
if(dataCollectionStatusIds.length > 0)
{
	return true;
}
return false;]]></script>
    <in-binding>
      <bind name="dataCollectionStatusIds" type="Array/string" export-name="dataCollectionStatusIds"/>
    </in-binding>
    <position y="63.59090909090908" x="284.5"/>
  </workflow-item>
  <workflow-item name="item9" type="end" end-mode="0">
    <position y="18.136363636363633" x="324.5"/>
  </workflow-item>
  <workflow-item name="item10" out-name="item3" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[stat collection]]></display-name>
    <script encoded="false"><![CDATA[System.log("Updating data collection entity with DataCollectionStatusId '" + dataCollectionStatusId +"'.");
updated = false;

var modelName = 'ManagementModelEntities.svc';
var entitySetName = 'DataCollectionStatuses';

// reset "LastCollectedTime" wich will force a data-collection
var properties = {"LastCollectedTime":null};
// this will trigger the data collection and reset "LastCollectedTime" to null. After data-collection LastCollectedTime will be populated again (indicating the update finished).
vCACEntityManager.updateModelEntityBySerializedKey(host.id, modelName, entitySetName, entityKey, properties, null, null);]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
      <bind name="host" type="vCAC:VCACHost" export-name="host"/>
      <bind name="entityKey" type="string" export-name="entityKey"/>
    </in-binding>
    <out-binding>
      <bind name="updated" type="boolean" export-name="updated"/>
    </out-binding>
    <position y="73.59090909090908" x="1024.5"/>
  </workflow-item>
  <workflow-item name="item0" out-name="item16" catch-name="item2" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[pop collection]]></display-name>
    <script encoded="false"><![CDATA[//Pick next source for data-collection
if(dataCollectionStatusIds != null && dataCollectionStatusIds != undefined)
{
	dataCollectionStatusId = dataCollectionStatusIds.pop();		
}
else
{
	throw("Error: unable to select next data collection");
}]]></script>
    <in-binding>
      <bind name="dataCollectionStatusIds" type="Array/string" export-name="dataCollectionStatusIds"/>
    </in-binding>
    <out-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
      <bind name="dataCollectionStatusIds" type="Array/string" export-name="dataCollectionStatusIds"/>
    </out-binding>
    <position y="73.59090909090908" x="464.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item5" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[update data]]></display-name>
    <script encoded="false"><![CDATA[// check the update process
var modelName = 'ManagementModelEntities.svc';
var entitySetName = 'DataCollectionStatuses';
var properties = {"DataCollectionStatusID":dataCollectionStatusId};
var updatedEntity = vCACEntityManager.readModelEntity(host.id, modelName, entitySetName, properties, null);

if(debugMode)
{
	var propsarray = updatedEntity.getProperties();
	for (var property in propsarray)
	{
		System.log("\t" +property + ": " + updatedEntity.getProperty(property));
	}
}

if(updatedEntity != null && updatedEntity!= undefined)
{
	// check if the entity has been updated yet...
	// the "LastCollectedTime" of this entity null before the update started. If it's not null now, the update has finished.
	if(updatedEntity.getProperty("LastCollectedTime") != null)
	{
		if(updatedEntity.getProperty("LastCollectedStatus") != 1)
		{
			System.warn("Updating data collection with DataCollectionStatusId " + dataCollectionStatusId + " failed.");
			datacollectionFailed = true;
			throw("Error: updating one or more data collections failed. Please check your endpoints. Exiting workflow.");
		}
		else
		{	
			if(collectionWasRunning)
			{
				/* if the data collection was already running when we started the workflow, there is a chance that our new 
				 * data was not collected. Thus we have to re-run the collection
				*/
				System.warn("Updating data collection finished but we have to make sure our entity exists by re-running the collection.");
			}
			else
			{
				System.log("Updating data collection with DataCollectionStatusId " + dataCollectionStatusId + " finished successfuly.");
			}
			updated = true;
		}
	}
	else
	{
		System.log("Still updating data collection '" + dataCollectionStatusId + "'...");
	}
}
else
{
	throw("Error: unable to read 'DataCollectionStatuses' entities");
}



]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
      <bind name="host" type="vCAC:VCACHost" export-name="host"/>
      <bind name="collectionWasRunning" type="boolean" export-name="collectionWasRunning"/>
      <bind name="debugMode" type="boolean" export-name="debugMode"/>
    </in-binding>
    <out-binding>
      <bind name="datacollectionFailed" type="boolean" export-name="datacollectionFailed"/>
      <bind name="updated" type="boolean" export-name="updated"/>
    </out-binding>
    <position y="73.59090909090908" x="1284.5"/>
  </workflow-item>
  <workflow-item name="item12" out-name="item10" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[get entity]]></display-name>
    <script encoded="false"><![CDATA[System.log("Selecting data collection entity with DataCollectionStatusId '" + dataCollectionStatusId +"'.");

// remember start time 
dataCollectionStartDate = new Date();

var modelName = 'ManagementModelEntities.svc';
var entitySetName = 'DataCollectionStatuses';
var properties = {"DataCollectionStatusID":dataCollectionStatusId};
var entity = vCACEntityManager.readModelEntity(host.id, modelName, entitySetName, properties, null);
var entityKey = entity.keyString;

if(!entityKey)
{
	throw("Error: unable to get entityKey for data collection with DataCollectionStatusId '" + dataCollectionStatusId + "'.");
}

var lastCollectedTime = entity.getProperty("LastCollectedTime"); // This should be not null. If it is null, a data collection is currently running
if(lastCollectedTime == null)
{
	// there is a chance a data collection is currently running.
	System.warn("A data collection is already being performed. We will have to wait and re-run the collection once it's finished.");
	collectionWasRunning = true;
}
else
{
	collectionWasRunning = false;
}]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
      <bind name="host" type="vCAC:VCACHost" export-name="host"/>
    </in-binding>
    <out-binding>
      <bind name="collectionWasRunning" type="boolean" export-name="collectionWasRunning"/>
      <bind name="dataCollectionStartDate" type="Date" export-name="dataCollectionStartDate"/>
      <bind name="entityKey" type="string" export-name="entityKey"/>
    </out-binding>
    <position y="73.59090909090908" x="884.5"/>
  </workflow-item>
  <workflow-item name="item14" out-name="item12" type="custom-condition" alt-out-name="item17">
    <display-name><![CDATA[re-run?]]></display-name>
    <script encoded="false"><![CDATA[if(collectionWasRunning)
{
	System.warn("Re-running data collection.");
	return true;
}
return false;]]></script>
    <in-binding>
      <bind name="collectionWasRunning" type="boolean" export-name="collectionWasRunning"/>
    </in-binding>
    <position y="136.3181818181818" x="884.5"/>
  </workflow-item>
  <workflow-item name="item15" out-name="item11" type="custom-condition" alt-out-name="item7">
    <display-name><![CDATA[fail on error?]]></display-name>
    <script encoded="false"><![CDATA[return failOnError
]]></script>
    <in-binding>
      <bind name="failOnError" type="boolean" export-name="failOnError"/>
    </in-binding>
    <position y="181.77272727272725" x="284.5"/>
  </workflow-item>
  <workflow-item name="item16" out-name="item12" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[lock]]></display-name>
    <script encoded="false"><![CDATA[/*System.log("Trying to lock data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
try
{
	LockingSystem.lockAndWait(dataCollectionStatusId, "advcollectionsystem");
	System.log("Locked data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
}
catch(e)
{
	throw("Error: unable to acquire lock on data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'. " + e);
}*/
]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
    </in-binding>
    <out-binding/>
    <position y="73.59090909090908" x="684.5"/>
  </workflow-item>
  <workflow-item name="item17" out-name="item7" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[unlock]]></display-name>
    <script encoded="false"><![CDATA[/*System.log("Trying to unlock data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
try
{
	LockingSystem.unlock(dataCollectionStatusId, "advcollectionsystem");
	System.log("Unlocked data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
}
catch(e)
{
	throw("Error: unable to unlock data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'. Please talk to your admin." + e);
}*/]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
    </in-binding>
    <out-binding/>
    <position y="146.3181818181818" x="685.0"/>
  </workflow-item>
  <workflow-item name="item11" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="181.77272727272725" x="44.5"/>
  </workflow-item>
  <workflow-item name="item13" out-name="item15" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[unlock]]></display-name>
    <script encoded="false"><![CDATA[System.log("Trying to unlock data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
try
{
	LockingSystem.unlock(dataCollectionStatusId, "advcollectionsystem");
	System.log("Unlocked data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'.");
}
catch(e)
{
	throw("Error: unable to unlock data collection with DataCollectionStatusID '" + dataCollectionStatusId + "'. Please talk to your admin." + e);
}]]></script>
    <in-binding>
      <bind name="dataCollectionStatusId" type="string" export-name="dataCollectionStatusId"/>
    </in-binding>
    <out-binding/>
    <position y="191.77272727272725" x="444.5"/>
  </workflow-item>
  <workflow-item name="item2" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="18.136363636363633" x="505.0"/>
  </workflow-item>
  <workflow-item name="item4" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="18.136363636363633" x="185.0"/>
  </workflow-item>
  <presentation>
    <p-param name="host">
      <desc><![CDATA[IaaS host]]></desc>
      <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
    </p-param>
    <p-param name="dataCollectionSelection">
      <desc><![CDATA[Data to collect (all if null)]]></desc>
      <p-qual kind="ognl" name="genericEnumeration" type="Array/Array/string"><![CDATA[#dataCollectionSelector]]></p-qual>
      <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[false]]></p-qual>
    </p-param>
    <p-param name="clustersToUpdate">
      <desc><![CDATA[Clusters to collect data from (all if null)]]></desc>
      <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[false]]></p-qual>
    </p-param>
    <p-param name="failOnError">
      <desc><![CDATA[Fail on collection error?]]></desc>
      <p-qual kind="static" name="defaultValue" type="boolean"><![CDATA[__NULL__]]></p-qual>
    </p-param>
  </presentation>
</workflow>