<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="b522ddbc-bf2c-4651-a8f9-c794e7682283" version="1.0.0" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Add an AD member to a local group in Windows]]></display-name>
  <description><![CDATA[Adds an AD user or group to a local group in Windows.
Detailed log, LocalAdmin.log, can be found on the Guest, in the temp directory (specified via a Configuration Element, usually c:\temp)

Prerequisites: run this workflow first: 'Verify or Create Standard Windows Temp Directory']]></description>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="adObjectName" type="string">
      <description><![CDATA[Name of the user or group in AD to add to the local group]]></description>
    </param>
    <param name="localGroupName" type="string"/>
    <param name="vm" type="VC:VirtualMachine">
      <description><![CDATA[Virtual machine]]></description>
    </param>
  </input>
  <attrib name="arguments" type="string" read-only="false">
    <value encoded="n"><![CDATA[/c net localgroup "[LOCALGRP]" /add "[ADOBJECT]" >> [TEMP]\LocalAdmin.log 2>&1]]></value>
    <description><![CDATA[Command to run on the target VM (will fill in group names)]]></description>
  </attrib>
  <attrib name="interactiveSession" type="boolean" read-only="true">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[This is set to true if the client wants an interactive session in the guest.]]></description>
  </attrib>
  <attrib name="programPath" type="string" read-only="true">
    <value encoded="n"><![CDATA[c:\windows\system32\cmd.exe]]></value>
    <description><![CDATA[The absolute path to the program to start. For Linux guest operating systems, /bin/bash is used to start the program.  For Solaris guest operating systems, /bin/bash is used to start the program if it exists. Otherwise /bin/sh is used. If /bin/sh is used, then the process ID returned will be that of the shell used to start the program, rather than the program itself, due to the differences in how /bin/sh and /bin/bash work. This PID will still be usable for watching the process with this API to find its exit code and elapsed time. ]]></description>
  </attrib>
  <attrib name="workingDirectory" type="string" read-only="true" conf-id="dc05cbe8-b146-4af9-b316-f882d9c5186c" conf-key="tempDir">
    <value encoded="n"><![CDATA[c:\temp]]></value>
    <description><![CDATA[The absolute path of the working directory for the program to be run. VMware recommends explicitly setting the working directory for the program to be run. If this value is unset or is an empty string, the behavior depends on the guest operating system. For Linux guest operating systems, if this value is unset or is an empty string, the working directory will be the home directory of the user associated with the guest authentication. For other guest operating systems, if this value is unset, the behavior is unspecified. ]]></description>
  </attrib>
  <attrib name="terminateOnTimeout" type="boolean" read-only="true">
    <value encoded="n"><![CDATA[true]]></value>
    <description><![CDATA[If true the process will be terminated on timeout.]]></description>
  </attrib>
  <attrib name="checkInterval" type="number" read-only="true">
    <value encoded="n"><![CDATA[10.0]]></value>
    <description><![CDATA[How often to check process status, in secs - input will override]]></description>
  </attrib>
  <attrib name="processTimeout" type="number" read-only="true">
    <value encoded="n"><![CDATA[1.0]]></value>
    <description><![CDATA[Timeout for process to complete in mins - input will override]]></description>
  </attrib>
  <attrib name="vmUsername" type="string" read-only="true" conf-id="dc05cbe8-b146-4af9-b316-f882d9c5186c" conf-key="vmUsername">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Username for the virtual machine]]></description>
  </attrib>
  <attrib name="vmPassword" type="SecureString" read-only="true" conf-id="dc05cbe8-b146-4af9-b316-f882d9c5186c" conf-key="vmPassword">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Password for the virtual machine]]></description>
  </attrib>
  <attrib name="processExitCode" type="number" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="logCommandLine" type="boolean" read-only="true">
    <value encoded="n"><![CDATA[true]]></value>
    <description><![CDATA[Won't log the command line unless this flag is set, in case the command contains a password]]></description>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="664.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item3" type="link" linked-workflow-id="7f7dcc2b-677a-4041-8bb6-8fe5040e658c">
    <display-name><![CDATA[Run Program in guest and wait]]></display-name>
    <in-binding>
      <bind name="vm" type="VC:VirtualMachine" export-name="vm">
        <description><![CDATA[Virtual machine]]></description>
      </bind>
      <bind name="interactiveSession" type="boolean" export-name="interactiveSession">
        <description><![CDATA[This is set to true if the client wants an interactive session in the guest.]]></description>
      </bind>
      <bind name="programPath" type="string" export-name="programPath">
        <description><![CDATA[The absolute path to the program to start. For Linux guest operating systems, /bin/bash is used to start the program.  For Solaris guest operating systems, /bin/bash is used to start the program if it exists. Otherwise /bin/sh is used. If /bin/sh is used, then the process ID returned will be that of the shell used to start the program, rather than the program itself, due to the differences in how /bin/sh and /bin/bash work. This PID will still be usable for watching the process with this API to find its exit code and elapsed time. ]]></description>
      </bind>
      <bind name="arguments" type="string" export-name="arguments">
        <description><![CDATA[The arguments to the program. In Linux and Solaris guest operating systems, the program will be executed by a guest shell. This allows stdio redirection, but may also require that characters which must be escaped to the shell also be escaped on the command line provided. For Windows guest operating systems, prefixing the command with "cmd /c" can provide stdio redirection. ]]></description>
      </bind>
      <bind name="workingDirectory" type="string" export-name="workingDirectory">
        <description><![CDATA[The absolute path of the working directory for the program to be run. VMware recommends explicitly setting the working directory for the program to be run. If this value is unset or is an empty string, the behavior depends on the guest operating system. For Linux guest operating systems, if this value is unset or is an empty string, the working directory will be the home directory of the user associated with the guest authentication. For other guest operating systems, if this value is unset, the behavior is unspecified. ]]></description>
      </bind>
      <bind name="terminateOnTimeout" type="boolean" export-name="terminateOnTimeout">
        <description><![CDATA[If true the process will be terminated on timeout.]]></description>
      </bind>
      <bind name="vmUsername" type="string" export-name="vmUsername">
        <description><![CDATA[Username for the virtual machine]]></description>
      </bind>
      <bind name="vmPassword" type="SecureString" export-name="vmPassword">
        <description><![CDATA[Password for the virtual machine]]></description>
      </bind>
      <bind name="checkInterval" type="number" export-name="checkInterval">
        <description><![CDATA[How often to check process status, in secs - input will override]]></description>
      </bind>
      <bind name="processTimeout" type="number" export-name="processTimeout">
        <description><![CDATA[Timeout for process to complete in mins - input will override]]></description>
      </bind>
      <bind name="logCommandLine" type="boolean" export-name="logCommandLine"/>
    </in-binding>
    <out-binding>
      <bind name="processExitCode" type="number" export-name="processExitCode"/>
    </out-binding>
    <description><![CDATA[Starts a program in the guest operating system, and waits for it to finish.
Outputs the program's exit code, but doesn't capture its output text.

Note: This is a much simpler workflow than COE's "Run Script in Guest" which comes with the Guest Script Manager.  However, it doesn't capture output text like that workflow does.]]></description>
    <position y="55.40909090909091" x="344.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item1" type="task">
    <display-name><![CDATA[Update Cmd]]></display-name>
    <script encoded="false"><![CDATA[arguments = arguments.replace("[LOCALGRP]", localGroupName);
arguments = arguments.replace("[ADOBJECT]", adObjectName);
arguments = arguments.replace("[TEMP]", workingDirectory);

System.log("Executing the following command in Guest OS:\n"
	+ programPath + " " + arguments);]]></script>
    <in-binding>
      <bind name="adObjectName" type="string" export-name="adObjectName"/>
      <bind name="localGroupName" type="string" export-name="localGroupName"/>
      <bind name="arguments" type="string" export-name="arguments">
        <description><![CDATA[Command to run on the target VM (will fill in group names)]]></description>
      </bind>
      <bind name="workingDirectory" type="string" export-name="workingDirectory">
        <description><![CDATA[The absolute path of the working directory for the program to be run. VMware recommends explicitly setting the working directory for the program to be run. If this value is unset or is an empty string, the behavior depends on the guest operating system. For Linux guest operating systems, if this value is unset or is an empty string, the working directory will be the home directory of the user associated with the guest authentication. For other guest operating systems, if this value is unset, the behavior is unspecified. ]]></description>
      </bind>
      <bind name="programPath" type="string" export-name="programPath">
        <description><![CDATA[The absolute path to the program to start. For Linux guest operating systems, /bin/bash is used to start the program.  For Solaris guest operating systems, /bin/bash is used to start the program if it exists. Otherwise /bin/sh is used. If /bin/sh is used, then the process ID returned will be that of the shell used to start the program, rather than the program itself, due to the differences in how /bin/sh and /bin/bash work. This PID will still be usable for watching the process with this API to find its exit code and elapsed time. ]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="arguments" type="string" export-name="arguments">
        <description><![CDATA[Command to run on the target VM (will fill in group names)]]></description>
      </bind>
    </out-binding>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item0" type="task">
    <display-name><![CDATA[Check Status]]></display-name>
    <script encoded="false"><![CDATA[if(processExitCode === 0) {
	System.log("Successfully added member '" + adObjectName 
		+ "' to local group '" + localGroupName + "'.");
}
else {
	throw "'net localgroup' command ended with exit code " + processExitCode
		+ ". See log in Guest OS for details: " + workingDirectory + "\\LocalAdmin.log";
}]]></script>
    <in-binding>
      <bind name="processExitCode" type="number" export-name="processExitCode"/>
      <bind name="adObjectName" type="string" export-name="adObjectName"/>
      <bind name="localGroupName" type="string" export-name="localGroupName"/>
      <bind name="workingDirectory" type="string" export-name="workingDirectory">
        <description><![CDATA[The absolute path of the working directory for the program to be run. VMware recommends explicitly setting the working directory for the program to be run. If this value is unset or is an empty string, the behavior depends on the guest operating system. For Linux guest operating systems, if this value is unset or is an empty string, the working directory will be the home directory of the user associated with the guest authentication. For other guest operating systems, if this value is unset, the behavior is unspecified. ]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="484.5"/>
  </workflow-item>
  <presentation>
    <p-param name="adObjectName">
      <desc><![CDATA[Name of the user or group in AD to add to the local group]]></desc>
    </p-param>
    <p-param name="localGroupName">
      <desc><![CDATA[localGroupName]]></desc>
    </p-param>
    <p-param name="vm">
      <desc><![CDATA[Virtual machine]]></desc>
    </p-param>
  </presentation>
</workflow>