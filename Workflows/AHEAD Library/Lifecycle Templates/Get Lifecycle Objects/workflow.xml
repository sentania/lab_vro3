<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item3" object-name="workflow:name=generic" id="b8a3f3e0-b05a-4d54-831c-94b2f02ce37a" version="1.0.0" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Get Lifecycle Objects]]></display-name>
  <description><![CDATA[Uses the vRA 7 'payload' input to get most the vRA 6 workflow input objects,
such as the Custom Properties, vCenter VM, vCAC VM, etc.

NOTES: If a custom hostname was previously applied via payload>virtualMachineAddOrUpdateProperties>Name,
then vmName (Output) will contain this value instead of the value of payload>machine>name.
]]></description>
  <position y="63.59090909090908" x="125.0"/>
  <input>
    <param name="payload" type="Properties">
      <description><![CDATA[Input object from the vRA Event Subscription]]></description>
    </param>
    <param name="logPayload" type="boolean">
      <description><![CDATA[Determines if the contents of the payload input will be written to System.log]]></description>
    </param>
  </input>
  <output>
    <param name="vcVm" type="VC:VirtualMachine">
      <description><![CDATA[vCenter VM (null for BuildingMachine)]]></description>
    </param>
    <param name="vcacEntity" type="vCAC:Entity">
      <description><![CDATA[vCAC Entity object of the target VM]]></description>
    </param>
    <param name="vcacHost" type="vCAC:VCACHost">
      <description><![CDATA[IaaS Host of the target VM]]></description>
    </param>
    <param name="customProperties" type="Properties">
      <description><![CDATA[vRA Custom Properties of the target VM]]></description>
    </param>
    <param name="vcacVm" type="vCAC:VirtualMachine">
      <description><![CDATA[vCAC VM object ofthe target VM]]></description>
    </param>
    <param name="vmName" type="string">
      <description><![CDATA[The name of the target VM in vRA and vCenter]]></description>
    </param>
  </output>
  <attrib name="vcacEntityId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Entity ID for the vCAC Virtual Machine object]]></description>
  </attrib>
  <attrib name="vcacVmTemp" type="vCAC:VirtualMachine" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[vCAC VM, will be copied to Output: vcacVm]]></description>
  </attrib>
  <attrib name="vcacEntityTemp" type="vCAC:Entity" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[vCAC VM Entity, will be copied to Output: vcacEntity]]></description>
  </attrib>
  <workflow-item name="item2" out-name="item1" type="task">
    <display-name><![CDATA[Get Payload Vals]]></display-name>
    <script encoded="false"><![CDATA[if (!payload) { throw "Required workflow input not provided: payload"; }

//Get machine hashmap, ensure it's valid before proceeding
var machine = payload.get("machine");
if (!machine) {
	throw "'payload' input hashmap does not contain a valid 'machine' hashmap: '" + machine + "'. "
		+ "Be sure to enable Custom Properties by adding a filter property to your blueprint, such "
		+ "as: Extensibility.Lifecycle.Properties.VMPSMasterWorkflow32.BuildingMachine=*";
}

//Get important data from the payload
 //payload
	var blueprint = payload.get("blueprintName");
 //payload>lifecycleState
	var lifecycleState = payload.get("lifecycleState");
	var stateName = lifecycleState.get("state");
	var statePhase = lifecycleState.get("phase");
 //payload>machine
	vcacEntityId = machine.get("id");	//used by getVirtualMachineEntityFromId and getVcacVmById
	vmName = machine.get("name");		//will be overwritten by customHostname (if present), below
	customProperties = machine.get("properties");
	var owner = machine.get("owner");
//payload>virtualMachineAddOrUpdateProperties
	var updatedProps = payload.get("virtualMachineAddOrUpdateProperties");
	if (updatedProps) {
		//Custom Hostname
		var customHostname = updatedProps.get("Name");
		if (customHostname) { vmName = customHostname; }
	}

System.log("Provisioning '" + vmName + "' (" + blueprint + ") for '" + owner + "'. State is '" 
	+ stateName + ":" + statePhase + "'.");
]]></script>
    <in-binding>
      <bind name="payload" type="Properties" export-name="payload"/>
    </in-binding>
    <out-binding>
      <bind name="customProperties" type="Properties" export-name="customProperties">
        <description><![CDATA[vRA Custom Properties of the target VM]]></description>
      </bind>
      <bind name="vmName" type="string" export-name="vmName">
        <description><![CDATA[The name of the target VM in vRA and vCenter]]></description>
      </bind>
      <bind name="vcacEntityId" type="string" export-name="vcacEntityId">
        <description><![CDATA[Entity ID for the vCAC Virtual Machine object]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[Save some values from the 'payload' hashmap as Attributes.]]></description>
    <position y="73.59090909090908" x="325.0"/>
  </workflow-item>
  <workflow-item name="item3" prototype-id="system-log" out-name="item2" type="task" interaction="l">
    <display-name><![CDATA[Begin Workflow]]></display-name>
    <script encoded="false"><![CDATA[System.log("Begin workflow: '" + workflow.currentWorkflow.name + "'");
]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Log the input text to the console log with level 'log']]></description>
    <position y="73.59090909090908" x="204.5"/>
  </workflow-item>
  <workflow-item name="item5" type="end" end-mode="0">
    <position y="136.3181818181818" x="124.5"/>
  </workflow-item>
  <workflow-item name="item6" out-name="item7" type="task" script-module="com.vmware.library.vcac/getVirtualMachineEntityFromId">
    <display-name><![CDATA[getVcacEntityById]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.vmware.library.vcac").getVirtualMachineEntityFromId(host,virtualMachineId) ;]]></script>
    <in-binding>
      <bind name="host" type="vCAC:VCACHost" explicitly-not-bound="true">
        <description><![CDATA[vCloud Automation Center host]]></description>
      </bind>
      <bind name="virtualMachineId" type="string" export-name="vcacEntityId">
        <description><![CDATA[Virtual machine id]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="vCAC:Entity" export-name="vcacEntityTemp"/>
    </out-binding>
    <description><![CDATA[Gets the vCAC VM Entitiy object by its ID.  If 'host' input is not provided, all vCAC plug-in connections will be queried.]]></description>
    <position y="73.59090909090908" x="564.5"/>
  </workflow-item>
  <workflow-item name="item8" out-name="item11" type="task">
    <display-name><![CDATA[Copy Outputs]]></display-name>
    <script encoded="false"><![CDATA[vcacVm = vcacVmTemp;
vcacEntity = vcacEntityTemp;]]></script>
    <in-binding>
      <bind name="vcacVmTemp" type="vCAC:VirtualMachine" export-name="vcacVmTemp">
        <description><![CDATA[vCAC VM, will be copied to Output: vcacVm]]></description>
      </bind>
      <bind name="vcacEntityTemp" type="vCAC:Entity" export-name="vcacEntityTemp">
        <description><![CDATA[vCAC VM Entity, will be copied to Output: vcacEntity]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="vcacEntity" type="vCAC:Entity" export-name="vcacEntity">
        <description><![CDATA[vCAC Entity object of the target VM]]></description>
      </bind>
      <bind name="vcacVm" type="vCAC:VirtualMachine" export-name="vcacVm">
        <description><![CDATA[vCAC VM object ofthe target VM]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[Some of the retrieved variables were needed by other Actions/Scripts, so they had to be stored as Attributes.  
This tasks copies those Attributes to their corresponding Outputs.]]></description>
    <position y="146.3181818181818" x="324.5"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item0" type="task">
    <display-name><![CDATA[Get vCAC Host]]></display-name>
    <script encoded="false"><![CDATA[//Read vCAC Host ID from the vCAC VM object
var vcacHostId = vcacEntityTemp.hostId;

//Search vRO for a vCAC Host object that matches the ID
vcacHost = Server.findForType("vCAC:VCACHost", vcacHostId);]]></script>
    <in-binding>
      <bind name="vcacEntityTemp" type="vCAC:Entity" export-name="vcacEntityTemp">
        <description><![CDATA[vCAC VM Entity, will be copied to Output: vcacEntity]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="vcacHost" type="vCAC:VCACHost" export-name="vcacHost">
        <description><![CDATA[IaaS Host of the target VM]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[Gets the vCAC host from the vCAC VM]]></description>
    <position y="146.3181818181818" x="684.5"/>
  </workflow-item>
  <workflow-item name="item11" prototype-id="system-log" out-name="item5" type="task" interaction="l">
    <display-name><![CDATA[End Workflow]]></display-name>
    <script encoded="false"><![CDATA[System.log("End workflow: '" + workflow.currentWorkflow.name + "'");
]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Log the input text to the console log with level 'log']]></description>
    <position y="146.3181818181818" x="204.5"/>
  </workflow-item>
  <workflow-item name="item7" out-name="item9" type="task" script-module="com.thinkahead.vcac/getVcacVmById">
    <display-name><![CDATA[getVcacVmById]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.thinkahead.vcac").getVcacVmById(vcacEntityId) ;]]></script>
    <in-binding>
      <bind name="vcacEntityId" type="string" export-name="vcacEntityId">
        <description><![CDATA[vCAC Virtual Machine ID to find]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="vCAC:VirtualMachine" export-name="vcacVmTemp"/>
    </out-binding>
    <description><![CDATA[Gets the vCAC Virtual Machine object for the specified vCAC Entity ID]]></description>
    <position y="73.59090909090908" x="684.5"/>
  </workflow-item>
  <workflow-item name="item0" out-name="item8" type="task" script-module="com.thinkahead.vcac/getVcVmFromVcac">
    <display-name><![CDATA[getVcVmFromVcac]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.thinkahead.vcac").getVcVmFromVcac(vcacVm) ;]]></script>
    <in-binding>
      <bind name="vcacVm" type="vCAC:VirtualMachine" export-name="vcacVmTemp"/>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="VC:VirtualMachine" export-name="vcVm"/>
    </out-binding>
    <description><![CDATA[Get the vCenter VM from the vCAC VM.  Only works if vCenter has already created the VM (after BuildingMachine).
Uses sdkConnection.searchIndex, which is supposed to be very effecient.]]></description>
    <position y="146.3181818181818" x="564.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item6" type="task" script-module="com.thinkahead.vra.eventbroker/logPayload">
    <display-name><![CDATA[logPayload]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
System.getModule("com.thinkahead.vra.eventbroker").logPayload(payload,writeToSystemLog) ;]]></script>
    <in-binding>
      <bind name="payload" type="Properties" export-name="payload">
        <description><![CDATA[payload object from the Event Subscription]]></description>
      </bind>
      <bind name="writeToSystemLog" type="boolean" export-name="logPayload">
        <description><![CDATA[If false, payload is written to the Debug log instead of the System log]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Logs the contents of an event subscription payload (a Properties object with multiple layers of nested Properties objects)]]></description>
    <position y="73.59090909090908" x="444.5"/>
  </workflow-item>
  <presentation>
    <p-param name="payload">
      <desc><![CDATA[payload]]></desc>
    </p-param>
    <p-param name="logPayload">
      <desc><![CDATA[Logs the contents of the payload input, recursively]]></desc>
    </p-param>
  </presentation>
</workflow>