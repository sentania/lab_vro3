<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="1be2d74d-260a-4b81-8faa-8d8d8aca4c7f" version="0.0.0" api-version="6.0.0" allowed-operations="vfe" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Get Networks]]></display-name>
  <position y="50.0" x="100.0"/>
  <attrib name="host" type="vCACCAFE:VCACHost" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='bd23869b-b58a-43ca-b0b2-b08857c76199'&dunesName='vCACCAFE:VCACHost']]></value>
  </attrib>
  <attrib name="applicableNetworks" type="Properties" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="location" type="string" read-only="false">
    <value encoded="n"><![CDATA[MKE]]></value>
  </attrib>
  <attrib name="environment" type="string" read-only="false">
    <value encoded="n"><![CDATA[Production]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="524.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[///////////////////////////////////////////// TESTING

var blueprint = "RHEL7";
var component = "RHEL_7_POSIX";
var user = "kol2843-nm@nm.nmfco.com";
var tenant = "vsphere.local";
var subtenant = "UCP Admin";
var subtenantId = "42d2b39b-6b15-4733-9113-5c52c7ab9fe3";

if(location && environment) {
// Pull in variables from context of form
//var blueprint = System.getContext().getParameter("__asd_composition_blueprintId");
//var component = System.getContext().getParameter("__asd_composition_componentId");
//var user = System.getContext().getParameter("__asd_requestedFor");
//var tenant = System.getContext().getParameter("__asd_tenantRef");
//var subtenantId = System.getContext().getParameter("__asd_subtenantRef");


// Get reservations and subtenants
var host = vCACCAFEHostManager.getDefaultHostForTenant(tenant , true);
var reservations = System.getModule("com.nm.ucp").getReservationsForUserAndComponent_v2(user, tenant, host, blueprint, component, subtenantId);
//var reservations = System.getModule("com.vmware.vra.reservations").getReservationsForUserAndComponent(user, tenant, host, blueprint, component);
var subtenants = vCACCAFEEntitiesFinder.findSubtenants(host, subtenant);

// Define new property
var applicableNetworks = new Properties();
var availableNetworks = [];

//Compile network name to search for.
var label = subtenant+" - "+location+" - "+environment;
var location = location.toLowerCase();
var environment = environment.toLowerCase();
	// Change development to nonproduction
if(environment == "development") {
	environment = "nonproduction";
}
	//Remove dash in Non-Production
environment = environment.replace("-", "");
subtenant = subtenant.toLowerCase();
var netName = subtenant+"-"+location;
	// Create Network Name with environment if more than one network is returned.
var netNameE = subtenant+"-"+location+"-"+environment;

//Get available networks from subtenant's reservations.
for each(var res in reservations) {
	if(res.getSubTenantId() == subtenants[0].id){
		var extensionData = res.getExtensionData();
		if(extensionData) {
			var networks = extensionData.get("reservationNetworks");
			if(networks) {
				for each(var network in networks.getValue()) {
					var path = network.getValue().get("networkPath");
					availableNetworks.push(path.label);
				}
			}
		}
	}
}
System.log("Available Networks: " +availableNetworks.length);

// Create array of unique networks.
var uNets = [];
uNets = removeDuplicates(availableNetworks);
//System.log("Found the following networks for location "+location);
for (n in uNets) {
	System.log(uNets[n]);
}
System.log(uNets.length);

// If only 1 network, return that network and skip to end.
if(uNets.length == 1) {
	applicableNetworks.put(uNets[0], label);
} else {

	// Pull out networks for specific Networks.
	var locNets = [];
	for (l in uNets) {
		if(uNets[l].search(netName) > -1) {
			locNets.push(uNets[l]);
		}
	}

	// If more than one, select appropriate environment Network.
	if(locNets.length > 1) {
		for (n in locNets) {
			if(locNets[n].search(netNameE) > -1) {
				applicableNetworks.put(locNets[n], label);
			}
		}
	} else {
		applicableNetworks.put(locNets[0], label);
	}
}
return applicableNetworks;
} else { 
	var incomplete = "Please complete fields above.";
	var applicableNetworks = new Properties;
	applicableNetworks.put(incomplete, incomplete);
	return applicableNetworks;
}

/////FUNCTIONS
//Remove duplicates from Array
function removeDuplicates(arr) {
	//var unique_array = [];
	for (i = 0; i< arr.length; i++) {
		if(uNets.indexOf(arr[i]) == -1) {
			uNets.push(arr[i])
		}
	}
	return uNets;
}]]></script>
    <in-binding>
      <bind name="host" type="vCACCAFE:VCACHost" export-name="host"/>
      <bind name="location" type="string" export-name="location"/>
      <bind name="environment" type="string" export-name="environment"/>
    </in-binding>
    <out-binding>
      <bind name="applicableNetworks" type="Properties" export-name="applicableNetworks"/>
    </out-binding>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation/>
</workflow>